#!/bin/sh
# Tcl ignores the next line -*- tcl -*- \
exec wish "$0" -- "$@"

package require Tk
package require Ttk

pack [frame .top] -side top -fill x
pack [button .top.back -text Back -command goBack] \
    [button .top.copy -text "Copy name" -command copyCommit] -side left
pack [scrollbar .commitsScroll -command {.commits yview}] -side right -fill y
pack [ttk::treeview .commits -yscrollcommand {.commitsScroll set} -show tree -takefocus 1 -selectmode browse] -expand 1 -fill both
.commits tag configure link -foreground blue
.commits tag bind link <Double-Button-1> {
    set target $linkTargets([.commits identify item %x %y])
    after 100 {
        .commits see $target
        .commits selection set $target
        .commits focus $target
    }
}
.commits tag bind link <Key-Return> {
    set target $linkTargets([.commits selection])
    .commits see $target
    .commits selection set $target
    .commits focus $target
}
bind .commits <Control-c> { copyCommit }
bind .commits <<TreeviewSelect>> commitsOnSelect

update

set logChannel [open "|git log -z --all --topo-order --pretty=format:%d..%H:%P:%s"]
set logStrings [split [read $logChannel] "\0"]
close $logChannel

set headChannel [open "|git log --pretty=format:%H -1 HEAD"]
set headHash [string trim [read $headChannel]]
close $headChannel

set t0 [clock clicks -milliseconds]
set ordered_commits {}
foreach lline $logStrings {
    if {[regexp -nocase {^( \((([^\.]|\.[^\.])*)\))?\.\.([0-9a-f]+):([0-9a-f ]*):(.*)$} $lline _allLine _d1 branch _d2 hash mparents subject]} {
        lappend ordered_commits $hash
        if {$branch ne ""} {
            set branches($hash) [lindex [split $branch ","] 0]
        }
        set subjects($hash) $subject
        set parents($hash) [split $mparents " "]
    } else {
        puts "cannot parse: $lline"
    }
}
set t1 [clock clicks -milliseconds]
puts "parsing: [expr $t1 - $t0]"

.commits insert {} end -id unmerged -text Unmerged
# hash => {{$nums} $mergedToHash}
array unset expected
proc expected_update {h mp1 mh1} {
    global expected
    global subjects
    global linkTargets

    if {![info exists expected($h)]} {
        set expected($h) [list $mp1 $mh1]
        return {}
    } else {
        set e0 $expected($h)
        set mp0 [lindex $e0 0]
        set mh0 [lindex $e0 1]
        if {[lless $mp0 $mp1]} {
            set expected($h) [list $mp1 $mh1]
            set lp $mh0
        } else {
            set lp $mh1
        }
        set lid [.commits insert $lp end -text "...$subjects($h)"]
        .commits tag add link $lid
        set linkTargets($lid) $h
    }
}

proc lless {l1 l2} {
    foreach e1 $l1 e2 $l2 {
        if {$e2 ne $e1} {
            if {$e2 eq ""} {
                return 0
            } elseif {$e1 eq "" || $e1 < $e2} {
                return 1
            } else {
                return 0
            }
        }
    }
    return 0
}

set expected($headHash) {{1} {}}
set unmerged_mp 0
foreach hash $ordered_commits {
    if {[info exists expected($hash)]} {
        set cinfo $expected($hash)
    } else {
        if {[info exists branches($hash)]} {
            set bn $branches($hash)
        } else {
            set bn "....."
        }
        set bId [.commits insert unmerged end -text $bn]
        set cinfo [list [list 0 0 $unmerged_mp] $bId]
    }
    set mp [lindex $cinfo 0]
    set mh [lindex $cinfo 1]
    # puts "$hash->$cinfo"
    .commits insert $mh end -id $hash -text $subjects($hash)
    if {[llength $parents($hash)] > 0} {
        set mp_last [lindex $mp end]
        expected_update [lindex $parents($hash) 0] [lreplace $mp end end [expr $mp_last + 1]] $mh
        lappend mp 0
        foreach ph [lrange $parents($hash) 1 end] {
            expected_update $ph $mp $hash
        }
    }
    unset -nocomplain expected($hash)
}
set t2 [clock clicks -milliseconds]
puts "rendering: [expr $t2 - $t1], total [expr $t2 - $t0]"

proc copyCommit {} {
    if {[.commits selection] ne {}} {
        if {[info exists linkTargets([.commits selection])]} {
            set res $linkTargets([.commits selection])
        } else {
            set res [.commits selection]
        }
        clipboard clear
        clipboard append $res
        puts "h: $res"
        # TODO: selection also
    }
}

set selection_history {}
set selection_last {}
set selection_pos end
proc commitsOnSelect {} {
    global selection_history selection_last

    set selection [.commits selection]
    if {$selection ne {} && $selection ne $selection_last} {
        lappend selection_history $selection
        set selection_last $selection
    }
}

proc goBack {} {
    
}

