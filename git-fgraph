#!/bin/sh
# Tcl ignores the next line -*- tcl -*- \
exec wish "$0" -- "$@"

package require Tk
package require Ttk

pack [scrollbar .commitsScroll -command {.commits yview}] -side right -fill y
pack [ttk::treeview .commits -yscrollcommand {.commitsScroll set} -show tree] -expand 1 -fill both

update

set logChannel [open "|git log -z --all --topo-order --pretty=format:%H:%P:%s"]
set logStrings [split [read $logChannel] "\0"]
close $logChannel

set t0 [clock clicks -milliseconds]
set ordered_commits {}
foreach lline $logStrings {
    if {[regexp -nocase {^([0-9a-f]+):([0-9a-f ]*):(.*)$} $lline _allLine hash mparents subject]} {
        lappend ordered_commits $hash
        set subjects($hash) $subject
        set parents($hash) [split $mparents " "]
    } else {
        # need to hadle also root commits but logic does not accept them
    }
}
set t1 [clock clicks -milliseconds]
puts "parsing: [expr $t1 - $t0]"

.commits insert {} end -id unmerged -text Unmerged
# hash => {$trunk_num $mergedToHash}
array unset expected
proc expected_update {h mp1 mh1} {
    global expected
    global subjects

    if {![info exists expected($h)]} {
        set expected($h) [list $mp1 $mh1]
        return {}
    } else {
        set e0 $expected($h)
        set mp0 [lindex $e0 0]
        set mh0 [lindex $e0 1]
        if {$mp1 > $mp0} {
            set expected($h) [list $mp1 $mh1]
            set lp $mh0
        } else {
            set lp $mh1
        }
        .commits insert $lp end -text "...$subjects($h)"
    }
}


set expected(de7514e386466e4fed750e9524e159a75ece56ec) {1 {}}
foreach hash $ordered_commits {
    if {[info exists expected($hash)]} {
        set cinfo $expected($hash)
    } else {
        set cinfo {0 unmerged}
    }
    set mp [lindex $cinfo 0]
    set mh [lindex $cinfo 1]
    # puts "$hash->$cinfo"
    .commits insert $mh end -id $hash -text $subjects($hash)
    if {$mh eq ""} {
        expected_update [lindex $parents($hash) 0] [expr $mp + 1] $mh
        foreach ph [lrange $parents($hash) 1 end] {
            expected_update $ph $mp $hash
        }
    } else {
        foreach ph $parents($hash) {
            expected_update $ph $mp $mh
        }
    }
    unset -nocomplain expected($hash)
}
set t2 [clock clicks -milliseconds]
puts "rendering: [expr $t2 - $t1], total [expr $t2 - $t0]"


